
# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QDialog, QMessageBox, QLineEdit
from PyQt6.QtCore import QPropertyAnimation
from modules import SLMISHandler, TableModel, Ui_Dialog, Ui_MainWindow
from selenium.webdriver.common.by import By
import json
import os



FILE_FILTERS = [
 "Excel Files (*.xlsx *.xls)",
]

class UiHandler(Ui_MainWindow):
    def __init__(self):
        super().__init__()
    
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.sections.itemClicked.connect(self.section_shift)
        self.generateTemplateBttn.clicked.connect(self.generate_template)
        self.loadGradeBttn.clicked.connect(self.load_grades)
        self.gradeBttn.clicked.connect(self.grade)


    def debug_init(self):
        """
        Initializes the debug mode of the application.

        This function is responsible for loading the credentials from the "auth_success.json" file, removing the file after loading, and printing a message indicating that the credentials have been loaded. It then retrieves the username and password from the loaded credentials and assigns them to the `username` and `password` variables.

        Next, it prints a message indicating that the handler is starting. It creates an instance of the `SLMISHandler` class and calls its `authentication` method with the `username` and `password` as arguments. The `username` is also assigned to the `self.username` attribute.

        After that, it retrieves the faculty schedule by calling the `get_faculty_schedule` method of the `self.handler` object and assigns it to the `all_sections_dict` variable. It then iterates over the keys of `all_sections_dict` and cleans the section using the `view_cleaner` method of the `self.handler` object. Each cleaned section is added to the `self.sections` list widget.

        Finally, it sets the text of the `self.label` widget to the text of the first item in the `self.sections` list, calls the `init_sections` method of the `self.handler` object, and shows a welcome message in the `self.statusbar` with the `self.username`.

        This function does not have any parameters and does not return any values.
        """

        cred = json.load(open("auth_success.json"))
        os.remove("auth_success.json")
        print("loaded in credentials")
        username, password = cred['user_name'], cred['password']

        print("Starting Handler")
        self.handler = SLMISHandler()
        self.handler.authentication(username, password)
        self.username = username

        print("Retrieving schedule...")
        all_sections_dict = self.handler.get_faculty_schedule()

        for section in all_sections_dict.keys():
            section = self.handler.view_cleaner(section)
            self.sections.addItem(section)
        self.label.setText(self.sections.item(0).text())
        self.handler.init_sections()
        self.statusbar.showMessage(f"Welcome, {self.username}")
        
    
    def section_shift(self, x):
        item_no = self.sections.currentRow()
        self.label.setText(self.sections.item(item_no).text())
    
    def generate_template(self):
        self.statusbar.showMessage("Gathering data...")
        item_no = self.sections.currentRow()
        out_path = self.handler.generate_template(item_no)
        self.statusbar.showMessage(f"Template generated at {out_path}")
    
    def load_grades(self):
        filter = FILE_FILTERS[0]
        filters = ";;".join(FILE_FILTERS)
        filename, selected_filter = QFileDialog.getOpenFileName(
                                                             filter=filters,
                                                             initialFilter=filter,
                                                             )
        if filename == "":
            return
        df = pd.read_excel(filename)
        self.df = df
        table_model = TableModel(df)
        self.gradeView.setModel(table_model)
        self.gradeBttn.setDisabled(False)
        self.currentWorkbookLabel.setText(f"Current Workbook: {filename}")
        self.statusbar.showMessage(f"Loaded Gradebook: {filename}")
    
    def grade(self):
        self.handler.grade(self.df, self.sections.currentRow())
        self.statusbar.showMessage("Done!")
        button = QMessageBox.information(None, "Success", "Grading completed!")

    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    login_dialog = Ui_Dialog()
    login_dialog.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
    if login_dialog.exec() == QDialog.DialogCode.Accepted:
        ui = UiHandler()
        ui.setupUi(None)
        QMessageBox.information(None, "Success", "Logged in successfully!\nOpening main window...")
        MainWindow.show()
        ui.debug_init()
    else:
        QMessageBox.warning(None, "Failure", "Login failed!")
        sys.exit()
    
    sys.exit(app.exec())



