
# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog, QDialog, QMessageBox
from modules import SLMISHandler, TableModel, Ui_Dialog, Ui_MainWindow
from selenium.webdriver.common.by import By
import json
import os



FILE_FILTERS = [
 "Excel Files (*.xlsx *.xls)",
]

class UiHandler(Ui_MainWindow):
    def __init__(self):
        super().__init__()
    
    def setupUi(self, MainWindow):
        super().setupUi(MainWindow)
        self.sections.itemClicked.connect(self.section_shift)
        self.generateTemplateBttn.clicked.connect(self.generate_template)
        self.loadGradeBttn.clicked.connect(self.load_grades)
        self.gradeBttn.clicked.connect(self.grade)


    def debug_init(self):

        cred = json.load(open("auth_success.json"))
        os.remove("auth_success.json")
        print("loaded in credentials")
        username, password = cred['user_name'], cred['password']

        print("Starting Handler")
        self.handler = SLMISHandler()
        self.handler.authentication(username, password)
        self.username = username
        # self.handler.authentication("gsulay", "{4_k66iI")

        
        all_sections_dict = self.handler.get_faculty_schedule()

        for section in all_sections_dict.keys():
            section = self.handler.view_cleaner(section)
            self.sections.addItem(section)
        self.label.setText(self.sections.item(0).text())
        self.handler.init_sections()
    
    def section_shift(self, x):
        item_no = self.sections.currentRow()
        self.label.setText(self.sections.item(item_no).text())
    
    def generate_template(self):
        self.statusbar.showMessage("Gathering data...")
        item_no = self.sections.currentRow()
        self.handler.generate_template(item_no)
        self.statusbar.showMessage("Done!")
    
    def load_grades(self):
        filter = FILE_FILTERS[0]
        filters = ";;".join(FILE_FILTERS)
        filename, selected_filter = QFileDialog.getOpenFileName(
                                                             filter=filters,
                                                             initialFilter=filter,
                                                             )
        if filename == "":
            return
        df = pd.read_excel(filename)
        self.df = df
        table_model = TableModel(df)
        self.gradeView.setModel(table_model)
        self.gradeBttn.setDisabled(False)
    
    def grade(self):
        self.handler.grade(self.df, self.sections.currentRow())
        self.statusbar.showMessage("Done!")
        button = QMessageBox.information(None, "Success", "Grading completed!")

    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    login_dialog = Ui_Dialog()
    if login_dialog.exec() == QDialog.DialogCode.Accepted:
        ui = UiHandler()
        ui.setupUi(MainWindow)
        QMessageBox.information(None, "Success", "Logged in successfully!\nOpening main window...")
        MainWindow.show()
        ui.debug_init()
    else:
        QMessageBox.warning(None, "Failure", "Login failed!")
    
    sys.exit(app.exec())



